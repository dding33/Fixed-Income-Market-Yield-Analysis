Dominant.Freq=c(P1[1,1], P1[2,1],P1[3,1]),
Spec=c(P1[1,3,], P1[2,3],P1[3,3]),
Lower=c(salt.l1,salt.l2,salt.l3),
Upper=c(salt.u1,salt.u2,salt.u3))
library(MASS)#package used to calculate CI
salt.u1<-2*P1[1,3]/qchisq(.1,2)#Make the calculations
salt.l1<-2*P1[1,3]/qchisq(.9,2)
salt.u2<-2*P1[2,3]/qchisq(.1,2)
salt.l2<-2*P1[2,3]/qchisq(.9,2)
salt.u3<-2*P1[3,3]/qchisq(.1,2)
salt.l3<-2*P1[3,3]/qchisq(.9,2)
#summarize the results into a data frame
result <- data.frame(Series=c(rep("salt",3)),
Dominant.Freq=c(P1[1,1], P1[2,1],P1[3,1]),
Spec=c(P1[1,3], P1[2,3],P1[3,3]),
Lower=c(salt.l1,salt.l2,salt.l3),
Upper=c(salt.u1,salt.u2,salt.u3))
library(MASS)#package used to calculate CI
salt.u1<-2*P1[1,3]/qchisq(.1,2)#Make the calculations
salt.l1<-2*P1[1,3]/qchisq(.9,2)
salt.u2<-2*P1[2,3]/qchisq(.1,2)
salt.l2<-2*P1[2,3]/qchisq(.9,2)
salt.u3<-2*P1[3,3]/qchisq(.1,2)
salt.l3<-2*P1[3,3]/qchisq(.9,2)
#summarize the results into a data frame
result <- data.frame(Series=c(rep("salt",3)),
Dominant.Freq=c(P1[1,1], P1[2,1],P1[3,1]),
Spec=c(P1[1,3], P1[2,3],P1[3,3]),
Lower=c(salt.l1,salt.l2,salt.l3),
Upper=c(salt.u1,salt.u2,salt.u3))
kable(results)
?kable()
library(knitr)
library(MASS)#package used to calculate CI
salt.u1<-2*P1[1,3]/qchisq(.1,2)#Make the calculations
salt.l1<-2*P1[1,3]/qchisq(.9,2)
salt.u2<-2*P1[2,3]/qchisq(.1,2)
salt.l2<-2*P1[2,3]/qchisq(.9,2)
salt.u3<-2*P1[3,3]/qchisq(.1,2)
salt.l3<-2*P1[3,3]/qchisq(.9,2)
#summarize the results into a data frame
result <- data.frame(Series=c(rep("salt",3)),
Dominant.Freq=c(P1[1,1], P1[2,1],P1[3,1]),
Spec=c(P1[1,3], P1[2,3],P1[3,3]),
Lower=c(salt.l1,salt.l2,salt.l3),
Upper=c(salt.u1,salt.u2,salt.u3))
kable(results)
library(MASS)#package used to calculate CI
salt.u1<-2*P1[1,3]/qchisq(.1,2)#Make the calculations
salt.l1<-2*P1[1,3]/qchisq(.9,2)
salt.u2<-2*P1[2,3]/qchisq(.1,2)
salt.l2<-2*P1[2,3]/qchisq(.9,2)
salt.u3<-2*P1[3,3]/qchisq(.1,2)
salt.l3<-2*P1[3,3]/qchisq(.9,2)
#summarize the results into a data frame
results <- data.frame(Series=c(rep("salt", 3)),
Dominant.freq = c(p[1,1],p[2,1],p[3,1]), spec = c(p[1,3], p[2,3], p[3,3]),
Lower = c(salt.l1, salt.l2, salt.l3),
Upper = c(salt.u1, salt.u2, salt.u3))
library(MASS)#package used to calculate CI
salt.u1<-2*P1[1,3]/qchisq(.1,2)#Make the calculations
salt.l1<-2*P1[1,3]/qchisq(.9,2)
salt.u2<-2*P1[2,3]/qchisq(.1,2)
salt.l2<-2*P1[2,3]/qchisq(.9,2)
salt.u3<-2*P1[3,3]/qchisq(.1,2)
salt.l3<-2*P1[3,3]/qchisq(.9,2)
#summarize the results into a data frame
results <- data.frame(Series=c(rep("salt", 3)),
Dominant.freq = c(p[1,1],p[2,1],p[3,1]),
spec = c(p[1,3], p[2,3], p[3,3]),
Lower = c(salt.l1, salt.l2, salt.l3),
Upper = c(salt.u1, salt.u2, salt.u3))
library(MASS)#package used to calculate CI
salt.u1<-2*P1[1,3]/qchisq(.1,2)#Make the calculations
salt.l1<-2*P1[1,3]/qchisq(.9,2)
salt.u2<-2*P1[2,3]/qchisq(.1,2)
salt.l2<-2*P1[2,3]/qchisq(.9,2)
salt.u3<-2*P1[3,3]/qchisq(.1,2)
salt.l3<-2*P1[3,3]/qchisq(.9,2)
#summarize the results into a data frame
results <- data.frame(Series=c(rep("salt", 3)),
Dominant.freq = c(P1[1,1],P1[2,1],P1[3,1]),
spec = c(P1[1,3], P1[2,3], P1[3,3]),
Lower = c(salt.l1, salt.l2, salt.l3),
Upper = c(salt.u1, salt.u2, salt.u3))
kable(results)
library(astsa)
library(knitr)
data(salt)
salt.per = mvspec(salt, log="no")
P<- salt.per$details[order(salt.per$details[,3], decreasing=TRUE),]
#Identify the first three dominant frequencies
P1[1,];P1[2,];P1[3,]
library(MASS)#package used to calculate CI
salt.u1<-2*P[1,3]/qchisq(.1,2)#Make the calculations
salt.l1<-2*P[1,3]/qchisq(.9,2)
salt.u2<-2*P[2,3]/qchisq(.1,2)
salt.l2<-2*P[2,3]/qchisq(.9,2)
salt.u3<-2*P[3,3]/qchisq(.1,2)
salt.l3<-2*P[3,3]/qchisq(.9,2)
#summarize the results into a data frame
results <- data.frame(Series=c(rep("salt", 3)),
Dominant.freq = c(P[1,1],P[2,1],P[3,1]),
spec = c(P[1,3], P[2,3], P[3,3]),
Lower = c(salt.l1, salt.l2, salt.l3),
Upper = c(salt.u1, salt.u2, salt.u3))
kable(results)
library(astsa)
library(knitr)
data(salt)
ts.plot(salt)
salt.per = mvspec(salt, log="no")
P<- salt.per$details[order(salt.per$details[,3], decreasing=TRUE),]
#Identify the first three dominant frequencies
P1[1,];P1[2,];P1[3,]
library(astsa)
library(knitr)
data(salt)
ts.plot(salt,main="salt")
salt.per = mvspec(salt, log="no")
P<- salt.per$details[order(salt.per$details[,3], decreasing=TRUE),]
#Identify the first three dominant frequencies
P1[1,];P1[2,];P1[3,]
1/0.0625
1/0.0469
1/0.1094
library(readxl)
library(dplyr)
library(jrvFinance)
##Load the data collected
clean <- read.csv("input/clean.csv")
dirty <- read.csv("input/dirty.csv")
clean <- as.data.frame(clean)
dirty <- as.data.frame(dirty)
##Some preparation
##Building empty data frames
v <- rep(1,10)
yields_raw <- data.frame(v,v,v,v,v,v,v,v,v,v)
spots_raw <- data.frame(v,v,v,v,v,v,v,v,v,v)
yields_res <- data.frame(v,v,v,v,v,v,v,v,v,v)
spot_res <- data.frame(v,v,v,v,v,v,v,v,v,v)
w <- rep(1,4)
forward_rate <- data.frame(w,w,w,w,w,w,w,w,w,w)
setwd("~/Desktop/YR4/APM466/A1/Fixed-Income-Market-Yield-Analysis")
setwd("~/Desktop/YR4/APM466/A1/Fixed-Income-Market-Yield-Analysis")
library(readxl)
library(dplyr)
library(jrvFinance)
##Load the data collected
clean <- read.csv("input/clean.csv")
dirty <- read.csv("input/dirty.csv")
clean <- as.data.frame(clean)
dirty <- as.data.frame(dirty)
##Some preparation
##Building empty data frames
v <- rep(1,10)
yields_raw <- data.frame(v,v,v,v,v,v,v,v,v,v)
spots_raw <- data.frame(v,v,v,v,v,v,v,v,v,v)
yields_res <- data.frame(v,v,v,v,v,v,v,v,v,v)
spot_res <- data.frame(v,v,v,v,v,v,v,v,v,v)
w <- rep(1,4)
forward_rate <- data.frame(w,w,w,w,w,w,w,w,w,w)
##Create dates
obs_dates <- c("2020-01-10","2020-1-11","2020-1-12","2020-1-13","2020-1-14","2020-1-17","2020-1-18","2020-1-19","2020-1-20","2020-1-21")
##Yield to maturity
for (i in c(1:10))
{
for(j in c(1:10))
{
#(obs date, maturity date, cpn rate, coupon freq, price, daycount, compounding freq, redemp value)
yields_raw[i,j]=bond.yield(obs_dates[j], clean$MATURITY.DATE[i], clean$COUPON[i], freq=2, clean[i, j+8], "ACT/ACT", 2,redemption_value=100)
}
}
###Spot Rate###
##2*[PRICE/0.5*CPN_RATE+NOTION)^(-1/2MONTH_TM)-1]
#this is the formula for the first 6 month
for (i in 1:10)
{
price=dirty[1,9+i]
coupon=dirty[1,3]*100/2
notion=100
mtm=dirty[1,6]/12
spots_raw[1,i]=2*((price/(coupon+notion))^(-1/(2*mtm))-1)
}
#from there we calculate the spot rate of other periods
#look at sapply?
for (i in c(2:10))
{
for (j in c(1:10))
{
price=dirty[i,9+j]
coupon=dirty$COUPON[i]*100/2
notion=100
pv_cp=0#setting the initial value to 0
mtm=dirty$MONTH.TO.MATURITY[i]/12
cpn_time=seq((6-dirty$MONTH.SINCE.LAST.CPN[i])/12, (dirty$MONTH.TO.MATURITY[i]-1)/12, 1/2)
for (k in c(1:length(cpn_time))){
pv_cp=pv_cp+coupon*(1+spots_raw[k,j]/2)^(-2*cpn_time[k])
}
new_price=price-pv_cp
pv_cp=0#e=clearing the variable for the next loop
spots_raw[i,j]=2*((new_price/(coupon+notion))^(-1/(2*mtm))-1)
}
}
-----------
##interpolation for n-month yield and n-month spot
for(i in c(1:10)){
for (j in c(1:9)){
yields_res[j,i]=approx(dirty$MONTH.TO.MATURITY, yields_raw[[i]], xout=6*j)$y
spot_res[j,i]=approx(dirty$MONTH.TO.MATURITY, spots_raw[[i]],xout=6*j)$y
}
}
rownames(yields_res)=rownames(spot_res)=seq(6,60,6)
###forward rates
for (j in c(1:4)){
for (i in c(1:10)){
n_of_yr=(1+spot_res[2*j,i]/2)^(2*j)
one_yr_f=(1+spot_res[2+2*j,i]/2)^(2+2*j)
forward_rate[i,j]=2*((one_yr_f/n_of_yr)^(0.5)-1)
}
}
one_yr_f=(1+spot_res[2+2*j,i]/2)^(2+2*j)
forward_rate[i,j]=2*((one_yr_f/n_of_yr)^(0.5)-1)
for (i in c(1:10)){
n_of_yr=(1+spot_res[2*j,i]/2)^(2*j)
one_yr_f=(1+spot_res[2+2*j,i]/2)^(2+2*j)
forward_rate[i,j]=2*((one_yr_f/n_of_yr)^(0.5)-1)
}
###forward rates
for (j in c(1:4)){
for (i in c(1:10)){
n_of_yr=(1+spot_res[2*j,i]/2)^(2*j)
one_yr_f=(1+spot_res[2+2*j,i]/2)^(2+2*j)
forward_rate[i,j]=2*((one_yr_f/n_of_yr)^(0.5)-1)
}
}
##add names for the matrix
cname_spots=cname_yield=cname_fwd=v
for (i in c(1:length(obs_dates))){
cname_spots[i]=c(paste("Spot rate on", obs_dates[i]))
cname_yield[i]=c(paste("Yield on", obs_dates[i]))
cname_fwd[i]=c(paste("Forward rate on", obs_dates[i]))
}
names(spots_raw)=names(spot_res)=cname_spots
names(yields_raw)=names(yields_res)=cname_yield
names(forward_rate)=cname_fwd
dirty=data.frame(dirty,spots_raw)
###covariance matrices for log yields
log_return1=log_return2=log_return3=log_return4=log_return5=vector("numeric",9)
for (i in c(1:9)){
log_return1[i]=log(yields_res[2,i]/yields_res[2,i+1])#calculate the log return for each year, we combine two entries because the canadian government bonds is coumpounded biannually
log_return2[i]=log(yields_res[4,i]/yields_res[4,i+1])
log_return3[i]=log(yields_res[6,i]/yields_res[6,i+1])
log_return4[i]=log(yields_res[8,i]/yields_res[8,i+1])
log_return5[i]=log(yields_res[10,i]/yields_res[10,i+1])
}
yields_log <- data.frame(log_return1,log_return2,log_return3,log_return4,log_return5)
cov_for_log_return <- cov(yields_log, yields_log)
###Same thing for forward rates
fwd12=fwd13=fwd14=fwd15=vector("numeric",9)
for (i in c(1:9)){
fwd12[i]=log(forward_rate[1,i]/forward_rate[1,i+1])
fwd13[i]=log(forward_rate[2,i]/forward_rate[2,i+1])
fwd14[i]=log(forward_rate[3,i]/forward_rate[3,i+1])
fwd15[i]=log(forward_rate[4,i]/forward_rate[4,i+1])
}
fwd <- data.frame(fwd12,fwd13,fwd14,fwd15)
cov_fwd <- cov(fwd,fwd)
##looking at eigenitems
eigen_of_yield=eigen(cov_for_log_return,symmetric = TRUE)
eigen_fwd=eigen(cov_fwd,symmetric = TRUE)
##Yield plot
(file=paste("/output","/YTM_PLOT.pdf", sep=""))
plot(seq(6,60,6),yields_res$v, type=l, ylim=c(0.015,0.022), col='blue')
lines(seq(6,60,6),yields_res$v.2, type=l, ylim=c(0.015,0.022), col='red')
dev.off()
View(eigen_fwd)
View(eigen_of_yield)
View(fit1)
View(cov_for_log_return)
View(cov_fwd)
library(readxl)
library(dplyr)
library(jrvFinance)
##Load the data collected
clean <- read.csv("input/clean.csv")
dirty <- read.csv("input/dirty.csv")
clean <- as.data.frame(clean)
dirty <- as.data.frame(dirty)
##Some preparation
##Building empty data frames
v <- rep(1,10)
yields_raw <- data.frame(v,v,v,v,v,v,v,v,v,v)
spots_raw <- data.frame(v,v,v,v,v,v,v,v,v,v)
yields_res <- data.frame(v,v,v,v,v,v,v,v,v,v)
spot_res <- data.frame(v,v,v,v,v,v,v,v,v,v)
w <- rep(1,4)
forward_rate <- data.frame(w,w,w,w,w,w,w,w,w,w)
##Create dates
obs_dates <- c("2020-01-10","2020-1-11","2020-1-12","2020-1-13","2020-1-14","2020-1-17","2020-1-18","2020-1-19","2020-1-20","2020-1-21")
##Yield to maturity
for (i in c(1:10))
{
for(j in c(1:10))
{
#(obs date, maturity date, cpn rate, coupon freq, price, daycount, compounding freq, redemp value)
yields_raw[i,j]=bond.yield(obs_dates[j], clean$MATURITY.DATE[i], clean$COUPON[i], freq=2, clean[i, j+8], "ACT/ACT", 2,redemption_value=100)
}
}
###Spot Rate###
##2*[PRICE/0.5*CPN_RATE+NOTION)^(-1/2MONTH_TM)-1]
#this is the formula for the first 6 month
for (i in 1:10)
{
price=dirty[1,9+i]
coupon=dirty[1,3]*100/2
notion=100
mtm=dirty[1,6]/12
spots_raw[1,i]=2*((price/(coupon+notion))^(-1/(2*mtm))-1)
}
#from there we calculate the spot rate of other periods
#look at sapply?
for (i in c(2:10))
{
for (j in c(1:10))
{
price=dirty[i,9+j]
coupon=dirty$COUPON[i]*100/2
notion=100
pv_cp=0#setting the initial value to 0
mtm=dirty$MONTH.TO.MATURITY[i]/12
cpn_time=seq((6-dirty$MONTH.SINCE.LAST.CPN[i])/12, (dirty$MONTH.TO.MATURITY[i]-1)/12, 1/2)
for (k in c(1:length(cpn_time))){
pv_cp=pv_cp+coupon*(1+spots_raw[k,j]/2)^(-2*cpn_time[k])
}
new_price=price-pv_cp
pv_cp=0#e=clearing the variable for the next loop
spots_raw[i,j]=2*((new_price/(coupon+notion))^(-1/(2*mtm))-1)
}
}
-----------
##interpolation for n-month yield and n-month spot
for(i in c(1:10)){
for (j in c(1:10)){
yields_res[j,i]=approx(dirty$MONTH.TO.MATURITY, yields_raw[[i]], xout=6*j)$y
spot_res[j,i]=approx(dirty$MONTH.TO.MATURITY, spots_raw[[i]],xout=6*j)$y
}
}
rownames(yields_res)=rownames(spot_res)=seq(6,60,6)
###forward rates
for (j in c(1:4)){
for (i in c(1:10)){
n_of_yr=(1+spot_res[2*j,i]/2)^(2*j)
one_yr_f=(1+spot_res[2+2*j,i]/2)^(2+2*j)
forward_rate[i,j]=2*((one_yr_f/n_of_yr)^(0.5)-1)
}
}
##add names for the matrix
cname_spots=cname_yield=cname_fwd=v
for (i in c(1:length(obs_dates))){
cname_spots[i]=c(paste("Spot rate on", obs_dates[i]))
cname_yield[i]=c(paste("Yield on", obs_dates[i]))
cname_fwd[i]=c(paste("Forward rate on", obs_dates[i]))
}
names(spots_raw)=names(spot_res)=cname_spots
names(yields_raw)=names(yields_res)=cname_yield
names(forward_rate)=cname_fwd
dirty=data.frame(dirty,spots_raw)
###covariance matrices for log yields
log_return1=log_return2=log_return3=log_return4=log_return5=vector("numeric",9)
for (i in c(1:9)){
log_return1[i]=log(yields_res[2,i]/yields_res[2,i+1])#calculate the log return for each year, we combine two entries because the canadian government bonds is coumpounded biannually
log_return2[i]=log(yields_res[4,i]/yields_res[4,i+1])
log_return3[i]=log(yields_res[6,i]/yields_res[6,i+1])
log_return4[i]=log(yields_res[8,i]/yields_res[8,i+1])
log_return5[i]=log(yields_res[10,i]/yields_res[10,i+1])
}
yields_log <- data.frame(log_return1,log_return2,log_return3,log_return4,log_return5)
cov_for_log_return <- cov(yields_log, yields_log)
###Same thing for forward rates
fwd12=fwd13=fwd14=fwd15=vector("numeric",9)
for (i in c(1:9)){
fwd12[i]=log(forward_rate[1,i]/forward_rate[1,i+1])
fwd13[i]=log(forward_rate[2,i]/forward_rate[2,i+1])
fwd14[i]=log(forward_rate[3,i]/forward_rate[3,i+1])
fwd15[i]=log(forward_rate[4,i]/forward_rate[4,i+1])
}
fwd <- data.frame(fwd12,fwd13,fwd14,fwd15)
cov_fwd <- cov(fwd,fwd)
##looking at eigenitems
eigen_of_yield=eigen(cov_for_log_return,symmetric = TRUE)
eigen_fwd=eigen(cov_fwd,symmetric = TRUE)
##Yield plot
(file=paste("/output","/YTM_PLOT.pdf", sep=""))
for (j in c(1:9)){
yields_res[j,i]=approx(dirty$MONTH.TO.MATURITY, yields_raw[[i]], xout=6*j)$y
spot_res[j,i]=approx(dirty$MONTH.TO.MATURITY, spots_raw[[i]],xout=6*j)$y
}
-----------
##interpolation for n-month yield and n-month spot
for(i in c(1:10)){
for (j in c(1:9)){
yields_res[j,i]=approx(dirty$MONTH.TO.MATURITY, yields_raw[[i]], xout=6*j)$y
spot_res[j,i]=approx(dirty$MONTH.TO.MATURITY, spots_raw[[i]],xout=6*j)$y
}
}
rownames(yields_res)=rownames(spot_res)=seq(6,60,6)
###forward rates
for (j in c(1:4)){
for (i in c(1:10)){
n_of_yr=(1+spot_res[2*j,i]/2)^(2*j)
one_yr_f=(1+spot_res[2+2*j,i]/2)^(2+2*j)
forward_rate[i,j]=2*((one_yr_f/n_of_yr)^(0.5)-1)
}
}
##add names for the matrix
cname_spots=cname_yield=cname_fwd=v
for (i in c(1:length(obs_dates))){
cname_spots[i]=c(paste("Spot rate on", obs_dates[i]))
cname_yield[i]=c(paste("Yield on", obs_dates[i]))
cname_fwd[i]=c(paste("Forward rate on", obs_dates[i]))
}
names(spots_raw)=names(spot_res)=cname_spots
names(yields_raw)=names(yields_res)=cname_yield
names(forward_rate)=cname_fwd
dirty=data.frame(dirty,spots_raw)
###covariance matrices for log yields
log_return1=log_return2=log_return3=log_return4=log_return5=vector("numeric",9)
for (i in c(1:9)){
log_return1[i]=log(yields_res[2,i]/yields_res[2,i+1])#calculate the log return for each year, we combine two entries because the canadian government bonds is coumpounded biannually
log_return2[i]=log(yields_res[4,i]/yields_res[4,i+1])
log_return3[i]=log(yields_res[6,i]/yields_res[6,i+1])
log_return4[i]=log(yields_res[8,i]/yields_res[8,i+1])
log_return5[i]=log(yields_res[10,i]/yields_res[10,i+1])
}
yields_log <- data.frame(log_return1,log_return2,log_return3,log_return4,log_return5)
cov_for_log_return <- cov(yields_log, yields_log)
###Same thing for forward rates
fwd12=fwd13=fwd14=fwd15=vector("numeric",9)
for (i in c(1:9)){
fwd12[i]=log(forward_rate[1,i]/forward_rate[1,i+1])
fwd13[i]=log(forward_rate[2,i]/forward_rate[2,i+1])
fwd14[i]=log(forward_rate[3,i]/forward_rate[3,i+1])
fwd15[i]=log(forward_rate[4,i]/forward_rate[4,i+1])
}
fwd <- data.frame(fwd12,fwd13,fwd14,fwd15)
cov_fwd <- cov(fwd,fwd)
##looking at eigenitems
eigen_of_yield=eigen(cov_for_log_return,symmetric = TRUE)
eigen_fwd=eigen(cov_fwd,symmetric = TRUE)
##Yield plot
(file=paste("/output","/YTM_PLOT.pdf", sep=""))
plot(seq(6,60,6),yields_res$v, type=l, ylim=c(0.015,0.022), col='blue')
lines(seq(6,60,6),yields_res$v.2, type=l, ylim=c(0.015,0.022), col='red')
dev.off()
\documentclass{article}
\usepackage[utf8]{inputenc}
\usepackage[a4paper, total={6.4in, 8.53in}]{geometry}
class(clean$ISSUE.DATE)
class(clean$MATURITY.DATE)
class(clean$COUPON)
###plot ytm
year<-c(0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year, yields_raw)
###plot ytm
year<-c(0,0.5,1,1.5,2,2.5,3,3.5,4,4.5)
plot(year, yields_raw)
###plot ytm
year<-c(0,0.5,1,1.5,2,2.5,3,3.5,4,4.5)
plot(year, yields_raw)
###plot ytm
year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year, yields_raw)
###plot ytm
year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year, yields_raw[1,])
plot(year, yields_raw[1,], type="o")
###plot ytm
year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year, yields_raw[1,], type="o")
for (i in c(2,10)){
lines(year, lines(yields_raw[i,], type="o"))
}
View(yields_raw)
###plot ytm
year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year, yields_raw[1,], type="o")
for (i in c(2,10)){
lines(year, lines(yields_raw[i,], type="o"))
}
lines(year,yields_raw[i,], type="o")
lines(year,yields_raw[i,], type="o")
###plot ytm
year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year, yields_raw[1,], type="o")
for (i in c(2,10)){
lines(year,yields_raw[i,], type="o")
}
###plot ytm
year<-c(0.5,1,1.5,2,2.5,3,3.5,4,4.5,5)
plot(year, yields_raw[1,], type="o")
for (i in c(2,10)){
lines(year,yields_raw[i,], type="o")
}
plot(year, yields_raw[1,], type="o", ylim=c(0.0003,0.0055))
for (i in c(2,10)){
lines(year,yields_raw[i,], type="o")
}
plot(year, yields_raw[1,], type="o", ylim=c(0.001,0.02))
for (i in c(2,10)){
lines(year,yields_raw[i,], type="o")
}
